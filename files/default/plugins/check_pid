#!/usr/bin/perl -w
#
# check_pid.pl - nagios plugin for checking PID file
#
# Copyright (C) 2008 Bernhard Minks, Dynamic Software GmbH <bernhard.minks@dynamic.de>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# Report bugs to:  nagiosplug-help@lists.sourceforge.net
#
# 20.06.2008 0.1 created
# 24.06.2008 0.2 bugfix
#
#

use strict;
use Getopt::Long;
use vars qw($PROGNAME $VERSION);
use lib "/usr/lib/nagios/plugins/"; # Path to util.pm !!
use utils qw ($TIMEOUT %ERRORS &print_revision &support);

sub print_help ();
sub print_usage ();

my ($opt_V, $opt_h, $opt_e, $opt_f, $opt_H, $opt_p, $opt_o, $opt_r, $opt_w, $opt_c, $opt_t);
my ($result, $message, $age, $size, $st);

$PROGNAME="check_pid.pl";
$VERSION ="0.1";

$opt_f="/var/run/rsnapshot.pid";
$opt_e="0";

Getopt::Long::Configure('bundling');
GetOptions(
        "V"   => \$opt_V, "version"     => \$opt_V,
        "h"   => \$opt_h, "help"        => \$opt_h,
        "f=s" => \$opt_f, "file"        => \$opt_f,
        "e"   => \$opt_e, "exists"      => \$opt_e,
        "t=i" => \$opt_t, "timeout" => \$opt_t);

if ($opt_t) {
        $TIMEOUT=$opt_t;
}

# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub {
        print "UNKNOWN - Plugin Timed out\n";
        exit $ERRORS{"UNKNOWN"};
};
alarm($TIMEOUT);

if ($opt_V) {
        print "$PROGNAME $VERSION\n\n";
        print "Copyright (c) 2008 Bernhard Minks, Dynamic Software <bernhard.minks\@dynamic.de>\n\n";
        exit $ERRORS{'OK'};
}

if ($opt_h) {
        print_help();
        exit $ERRORS{'OK'};
}

if (! $opt_f) {
        print "No PID file specified\n\n";
        print_usage();
        exit $ERRORS{'UNKNOWN'};
}

sub print_usage () {
        print "Usage:\n";
        print "  $PROGNAME -f <pid-file> [-e]\n";
        print "  $PROGNAME [-h | --help]\n";
        print "  $PROGNAME [-V | --version]\n";
        print "\n\nOptions:\n";
        print "  -f, --file\n";
        print "     name of the PID file to check for\n";
        print "  -e\n";
        print "     negate the check result. $PROGNAME will return CRITICAL, if the PID file exists.\n";
        print "  -h, --help\n";
        print "     Print detailed help screen\n";
        print "  -V, --version\n";
        print "     Print version information\n\n";

}

sub print_help () {
        print "$PROGNAME $VERSION\n\n";
        print "Copyright (c) 2008 Bernhard Minks, Dynamic Software <bernhard.minks\@dynamic.de>\n\n";
        print_usage();
        print "\n";
        support();
}

if ( -e $opt_f )
{
        if ( $opt_e )
        {
                $message = "CRITICAL: PID file $opt_f EXISTS.";
                $result = $ERRORS{"CRITICAL"};
        }
        else
        {
                $message = "OK: PID file $opt_f exists.";
                $result = $ERRORS{"OK"};
        }
}
else
{
        if ( $opt_e )
        {
                $message = "OK: PID file $opt_f does not exists.";
                $result = $ERRORS{"OK"};
        }
        else
        {
                $message = "CRITICAL: PID file $opt_f NOT exists.";
                $result = $ERRORS{"CRITICAL"};
        }

}

print $message. "\n";
exit $result;
